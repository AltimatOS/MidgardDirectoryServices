#!/usr/bin/env perl

use strict;
use warnings;
use English;
use utf8;

use Authen::SASL qw(XS);
use Carp;
use Config::IniFiles;
use Cwd;
use File::Basename;
use Getopt::Long;
use Net::LDAP 0.33;
use Net::LDAP::Control::Paged;
use Net::LDAP::Constant ("LDAP_CONTROL_PAGED");
use Net::LDAP::LDIF;

my $all;
my $domain;
my $servers;
my $workstations;
my $debug = 1;

my $APP_NAME = basename($0);
my $VERSION  = "1.1";

sub version() {
    print "$APP_NAME - Show all LDAP hosts - $VERSION\n";
    print "===================================\n";
    print "Author: Gary Greene <ggreene\@minervanetworks.com>\n";
    print "Copyright: 2010 Gary Greene <ggreene\@minervanetworks.com>\n\n";
    exit 0;
}

sub usage() {
    print "$APP_NAME - Show all LDAP hosts - $VERSION\n";
    print "===================================\n";
    print "Author: Gary Greene <ggreene\@minervanetworks.com>\n";
    print "Copyright: 2010 Gary Greene <ggreene\@minervanetworks.com>\n\n";
    print "Usage: $APP_NAME <-a|-s|-w> [OPTIONS]\n\n";
    print "REQUIRED (one of the following):\n";
    print "    -a|--all             Show ALL hosts up to page max of 990\n";
    print "    -s|--servers         Show ALL servers up to page max of 990\n";
    print "    -w|--workstations    Show ALL workstations up to page max of 990\n";
    print "OPTIONAL:\n";
    print "    -n|--domain <DOMAIN> Default domain to show\n";
    print "    -v|--version         Show this application's version\n";
    print "    -u|--help            Show this message\n";
    exit 1;
}

sub loadConfig {
    my $config = Config::IniFiles->new(-file => "/etc/mdssclnt/config.ini",
                                       -allowcontinue => 1) or
                                       carp("Could not read configuration: $OS_ERROR\n");
                                        
    my $LDAP_HOST = $config->val('LDAP', 'ldapmaster') or die("Config: No LDAP hosts specified: Exiting.\n");
    my $LDAP_PORT = $config->val('LDAP', 'port', 389);
    my $LDAP_TIMEOUT = $config->val('LDAP', 'timeout', 5);
    my $LDAP_BASE  = $config->val('LDAP', 'basedn') or die("Config: No basedn specified: Exiting.\n");
    my $LDAP_ANON_BIND = $config->val('LDAP', 'anonymous_bind', 0);
    my $LDAP_USE_SASL = $config->val('LDAP', 'sasl', 0);
    my $LDAP_BINDDN = $config->val('LDAP_SHOW', 'binddn');
    my $LDAP_BDN_PWD = $config->val('LDAP_SHOW', 'bindpwd');
    my $LDAP_TYPE = $config->val('LDAP', 'type', 'rfc2307');

    return $LDAP_HOST, $LDAP_PORT, $LDAP_TIMEOUT, $LDAP_BASE, $LDAP_BINDDN,
           $LDAP_ANON_BIND, $LDAP_BDN_PWD, $LDAP_USE_SASL, $LDAP_TYPE;
}

sub processOptions() {
    if (not defined($domain)) {
        usage();
    }
    if ($domain eq '') {
        usage();
    }

    if (not defined($all) and not defined($servers) and not defined($workstations)) {
        usage();
    }
}

sub ldap_bind {
    my ($host, $port, $timeout, $base, $binddn, $anonBind, $bindDnPwd, $sasl, $type) = @ARG;

    my ($ldap, $result) = "";
    print "Binding to $host on port $port.\n" if $debug;
    $ldap = Net::LDAP->new($host, port => $port) or carp("$@");
    if ($anonBind) {
        print "Binding anonymously.\n" if $debug;
        $result = $ldap->bind;
    } else {
        if ($sasl) {
            # Create our SASL object now to use it if we want SASL auth
            my $saslObj = Authen::SASL->new(mechanism => 'GSSAPI', debug => 1);
            if (not defined($saslObj)) { die("$APP_NAME: unable to create the SASL object: Exiting\n"); }
            print "Binding with SASL mech GSSAPI.\n" if $debug;
            eval {
                $result = $ldap->bind(sasl => $saslObj, version => 3);
            };
            
            if ($@) {
                chomp $@;
                die "\nBind error         : $@",
                    "\nDetailed SASL error: ", $saslObj->error,
                    "\nTerminatind\n";
            }
        } else {
            print "Binding without SASL as $binddn with password.\n" if $debug;
            $result = $ldap->bind($binddn, password => $bindDnPwd);
        }
    }
    carp "LDAP: Cannot bind to LDAP host" if (not defined($ldap));

    return $ldap,$base,$type;
}

sub ldap_query {
    my ($ldap, $base, $page, $attrs, $filter) = @ARG;

    my $result = "";

    $result = $ldap->search(base => $base,
                            control => [$page],
                            attrs   => ["$attrs"],
                            scope   => 'sub',
                            filter  => "$filter"
    );
    $result->code && die $result->error;
    if ($result->count eq 0) {
        print "$APP_NAME: no hosts in $domain or $domain does not exist. Exiting.\n";
        exit -1;
    }

    foreach my $line ($result->entries) {
        print lc($line->get_value($attrs)), "\n";
    }
}

sub main {
    processOptions();

    my ($ldap, $base, $type) = ldap_bind(loadConfig());
    my $result = "";

    my $page = Net::LDAP::Control::Paged->new(size => 990);

    my $filter;
    if ($type == "ActiveDirectory") {
        $attrs = 'dNSHostName';
    } else {
        $attrs = 'cn';
    }
    my $attrs;
    if (defined($all)) {
        print "Dumping list of all hosts for $domain.\n";
        my $filter = "(\&(objectCategory=computer) (objectClass=computer) (dNSHostName=*.$domain))";
        ldap_query($ldap, $base, $page, $attrs, $filter);
    } elsif (defined($servers)) {
        print "All Windows servers in $domain:\n";
        my $attrs = 'dNSHostName';
        my $filter = "(\&(objectCategory=computer) (objectClass=computer) (\|(operatingSystem=Windows Server*) (operatingSystem=Windows 2000 Server) (operatingSystem=Windows 2003*) (operatingSystem=Windows 2008*)))";
        ldap_query($ldap, $base, $page, $attrs, $filter);
    } elsif (defined($workstations)) {
        print "All Windows and Mac OS X workstations in $domain:\n";
        my $attrs = 'dNSHostName';
        my $filter = "(\&(objectCategory=computer) (objectClass=computer) (\|(operatingSystem=Windows 2000 Pro*) (operatingSystem=Windows XP*) (operatingSystem=Windows 7*) (operatingSystem=Mac*)))";
        ldap_query($ldap, $base, $page, $attrs, $filter);
    }
}

GetOptions(
    'a|all'             => \$all,
    'd|debug'           => \$debug,
    'n|domain=s'	    => \$domain,
    's|servers'         => \$servers,
    'w|workstations'    => \$workstations,
    'v|version'         => sub { version() },
    'h|help'            => sub { usage() }
) or usage();
main();

exit 0;
